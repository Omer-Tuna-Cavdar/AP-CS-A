import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

// Define the Customer class
class Customer {
    private String customerType;
    private String customerName;
    private int customerID;

    // Constructor
    public Customer(int customerID, String customerName, String customerType) {
        this.customerType = customerType;
        this.customerName = customerName;
        this.customerID = customerID;
    }

    // Setters and Getters
    public void setCustomerType(String customerType) {
        this.customerType = customerType;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public void setCustomerID(int customerID) {
        this.customerID = customerID;
    }

    public String getCustomerType() {
        return customerType;
    }

    public String getCustomerName() {
        return customerName;
    }

    public int getCustomerID() {
        return customerID;
    }
}

// Define the Product class
class Product {
    private String productName;
    private int productID;
    private int productQuantity;

    // Constructor
    public Product(String productName, int productID, int productQuantity) {
        this.productName = productName;
        this.productID = productID;
        this.productQuantity = productQuantity;
    }

    // Setters and Getters
    public void setProductQuantity(int productQuantity) {
        this.productQuantity = productQuantity;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public void setProductID(int productID) {
        this.productID = productID;
    }

    public int getProductQuantity() {
        return productQuantity;
    }

    public String getProductName() {
        return productName;
    }

    public int getProductID() {
        return productID;
    }
}

// Define the SalesInterface interface
interface SalesInterface {
    void sale(int customerID, int productID);
    void redeem(int customerID, int productID);
}

public class SalesSystemUI extends JFrame implements SalesInterface {
    private ArrayList<Customer> customerList = new ArrayList<>();
    private ArrayList<Product> productList = new ArrayList<>();
    private JTextField customerTypeField, customerNameField, customerIdField;
    private JTextField productNameField, productIdField, productQuantityField;
    private JButton addCustomerButton, addProductButton, makeSaleButton, redeemButton;

    public SalesSystemUI() {
        createUI();
    }

    private void createUI() {
        setTitle("Sales System Interface");
        setSize(600, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panels for Customer and Product forms
        JPanel customerPanel = new JPanel(new GridLayout(0, 2));
        JPanel productPanel = new JPanel(new GridLayout(0, 2));

        // Customer form components
        customerPanel.add(new JLabel("Customer Type:"));
        customerTypeField = new JTextField();
        customerPanel.add(customerTypeField);

        customerPanel.add(new JLabel("Customer Name:"));
        customerNameField = new JTextField();
        customerPanel.add(customerNameField);

        customerPanel.add(new JLabel("Customer ID:"));
        customerIdField = new JTextField();
        customerPanel.add(customerIdField);

        addCustomerButton = new JButton("Add Customer");
        customerPanel.add(addCustomerButton);

        // Product form components
        productPanel.add(new JLabel("Product Name:"));
        productNameField = new JTextField();
        productPanel.add(productNameField);

        productPanel.add(new JLabel("Product ID:"));
        productIdField = new JTextField();
        productPanel.add(productIdField);

        productPanel.add(new JLabel("Product Quantity:"));
        productQuantityField = new JTextField();
        productPanel.add(productQuantityField);

        addProductButton = new JButton("Add Product");
        productPanel.add(addProductButton);

        // Sales and redeem buttons
        makeSaleButton = new JButton("Make Sale");
        redeemButton = new JButton("Redeem");

        // Action listeners for buttons
        addCustomerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int customerId = Integer.parseInt(customerIdField.getText());
                    String customerName = customerNameField.getText();
                    String customerType = customerTypeField.getText();
                    Customer newCustomer = new Customer(customerId, customerName, customerType);
                    customerList.add(newCustomer);
                    JOptionPane.showMessageDialog(null, "Customer added: " + newCustomer.getCustomerName());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid Customer ID");
                }
            }
        });

        addProductButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int productId = Integer.parseInt(productIdField.getText());
                    String productName = productNameField.getText();
                    int productQuantity = Integer.parseInt(productQuantityField.getText());
                    Product newProduct = new Product(productName, productId, productQuantity);
                    productList.add(newProduct);
                    JOptionPane.showMessageDialog(null, "Product added: " + newProduct.getProductName());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid Product ID or Quantity");
                }
            }
        });

        makeSaleButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int customerId = Integer.parseInt(customerIdField.getText());
                    int productId = Integer.parseInt(productIdField.getText());
                    sale(customerId, productId);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid Customer ID or Product ID");
                }
            }
        });

        redeemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int customerId = Integer.parseInt(customerIdField.getText());
                    int productId = Integer.parseInt(productIdField.getText());
                    redeem(customerId, productId);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid Customer ID or Product ID");
                }
            }
        });

        // Panel to hold sales and redeem buttons
        JPanel salesPanel = new JPanel();
        salesPanel.add(makeSaleButton);
        salesPanel.add(redeemButton);

        // Main panel
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.add(customerPanel, BorderLayout.NORTH);
        mainPanel.add(productPanel, BorderLayout.CENTER);
        mainPanel.add(salesPanel, BorderLayout.SOUTH);

        // Adding main panel to frame
        add(mainPanel);
    }

    @Override
    public void sale(int customerID, int productID) {
        // Implement sale logic
        JOptionPane.showMessageDialog(null, "Sale made for Customer ID: " + customerID + " and Product ID: " + productID);
    }

    @Override
    public void redeem(int customerID, int productID) {
        // Implement redeem logic
        JOptionPane.showMessageDialog(null, "Redemption made for Customer ID: " + customerID + " and Product ID: " + productID);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SalesSystemUI().setVisible(true);
            }
        });
    }
}
